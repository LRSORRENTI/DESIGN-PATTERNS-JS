===================
CREATIONAL PATTERN: 

BUILDER

===================

The builder pattern is a creational design pattern 
that allows the building of complex objects step by 
step by separating the construction of an object from 
it's representation 

It provides a way to create an object by initializing 
it's properties in a step-by-step manner rather than 
using a giant constructor function 

This pattern is commonly used in software engineering 
when there's a need to create objects that have 
multiple properties that need to be set in a 
specific order 

The builder pattern is very useful when there are 
many possible optional properties and when the object 
being created is complex 

````````
BENEFITS

````````

1. Flexibility: The builder pattern facilitates the 
   ability to create objects in a flexible way, allowing 
   configuration and modification of properties step-by-step 

2. Encapsulation: By separating the construction of the 
   object from it's representation, the builder pattern
   provides a way encapsulate the creation process, 
   making easier to maintain code 

3. Consistency: Using the builder pattern ensures that the 
   object is created consistently, regardless of the 
   order of the properties being set  


``````````
Drawbacks

``````````

Some potential drawbacks include: 

1. Increased complexity: Depending on the use-case, 
   implementing the builder pattern can increase 
   complexity to your code, as it involves creating 
   multiple classes to represent the object being built

2. Performance: This pattern can result in slower performance
   compared to other creational patterns because of the 
   additional overhead of creating multiple objects
